#!/usr/bin/env python3
import argparse
from pathlib import Path
import random
import os
import sys
import configparser


if os.geteuid() != 0:
    exit("You need to have root privileges to run this script")


def version():
    return '0.1'


def resolve(path):
    basedir = Path(__file__).resolve().parent
    return Path(basedir, path)


def handler(args):
    if args.netns:
        target = Path(f'/etc/netns/{args.netns}/wireguard/{args.interface}.conf')
    else:
        target = Path(f'/etc/wireguard/{args.interface}.conf')
    if args.print:
        handle = sys.stdout
        handle.write(f'Printing what would be: {target}\n\n')
    else:
        target_dir = target.parent
        if not target_dir.is_dir():
            print(f'Creating: {target_dir}')
            target.parent.mkdir(parents=True, exist_ok=True)
        
        print(f'Generating: {target}')
        handle = open(target, 'w')
        target.chmod(0o750)
    return handle


def main(args):
    try:
        if not len(args.interface):
            print('please select device to configure with --dev')
            sys.exit()

        t_path = Path(f'/root/.wgen/templates/{args.interface}')
        if t_path.is_dir():
            template_dir = t_path
        else:
            print (f'can not find directory {t_path}')
            template_dir = None

        c_path = Path(f'/root/.wgen/settings/{args.interface}.conf')
        if c_path.is_file():
            conf = c_path
        else:
            print(f'can not find file: {c_path}')
            conf = None

        if conf and template_dir:
            template_file = Path(template_dir, random.choice(os.listdir(template_dir)))
            template = configparser.ConfigParser()
            template.read(template_file)
            template.read(conf)
            template.write(handler(args))
    
    except Exception as e:
        print(e)
        sys.exit(1)


if __name__ == '__main__':
    my_parser = argparse.ArgumentParser(description='generate config for wireguard')
    my_parser.add_argument('--dev', dest='interface', type=str, default='', help='selected interface')
    my_parser.add_argument('--netns', dest='netns', type=str, default='', help='selected netns (optional)')
    my_parser.add_argument('--print', dest='print', action='store_true', default=False, help="print config but don't generate file")
    my_parser.add_argument('--version', dest='version', action='store_true', default=False, help="show version")

    args = my_parser.parse_args()

    if args.version:
        print(version())
        sys.exit()

    main(args)
