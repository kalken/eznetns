#!/usr/bin/env bash

#set -e

if test "$EUID" -ne 0; then 
    echo "You need to have root privileges to run this script"
    exit
fi

netns.add () {
    ip netns add "$_ns"
    ip -n "$_ns" link set lo up
}

netns.setup () {
    if test -d "/etc/netns/$_ns"; then
        echo "/etc/netns/$_ns: exists"
    else
        mkdir -p "/etc/netns/$_ns"
        echo "created: /etc/netns/$_ns"
    fi

    if test -f "$_nspath/resolv.conf"; then
        if test -f "/etc/netns/$_ns/resolv.conf"; then
            echo "resolve.conf: /etc/netns/$_ns/resolv.conf"
        else
            ln -s "$_nspath/resolv.conf" "/etc/netns/$_ns/resolv.conf"
            echo "resolve.conf -> /etc/netns/$_ns/resolv.conf"
        fi
    fi

    if test -f "$_nspath/nsswitch.conf"; then
        if test -f "/etc/netns/$_ns/nsswitch.conf"; then
            echo "nsswitch.conf: /etc/netns/$_ns/nsswitch.conf"
        else
            ln -s "$_nspath/nsswitch.conf" "/etc/netns/$_ns/nsswitch.conf"
            echo "nsswitch.conf -> /etc/netns/$_ns/nsswitch.conf" 
        fi
    fi
}

netns.nftables () {
    if test -f "$_nspath/nftables.conf"; then
        echo "nftables: $_nspath/nftables.conf"
        ip netns exec "$_ns" nft -f "$_nspath/nftables.conf"
    fi
}

netns.wireguard () {
    if test -d "$_nspath/wireguard"; then
        for _file in "$_nspath/wireguard/"*.conf; do
            _filename=$(basename -- "$_file")
            echo "wireguard: $_file"
            _dev="${_filename%.conf}"
            wg.up "$_dev"
        done
    fi
}

netns.remove () {
    #ip netns pids $_ns | xargs kill
    ip netns del "$_ns"
}

wg.up () {
    _dev=$1

    if test -z "$_dev"; then
        echo "not enough information: \"dev\" argument is required."
        exit 1
    fi
    
    _conf="$_nspath/wireguard/$_dev.conf"

    if test ! -f "$_conf"; then
        echo "file not found: $_conf"
        exit 1
    fi

    ip link add "$_dev" type wireguard
    ip link set "$_dev" netns "$_ns"
    ip netns exec "$_ns" wg setconf "$_dev" <(wg-quick strip "$_conf")
    
    _addr=$(awk -F ' *= *' 'tolower($0) ~ /^address/ {print $2}' "$_conf")

    IFS=", "; for i in $_addr; do
        ip -n "$_ns" a add "$i" dev "$_dev"
    done
    
    _nameservers=$(awk -F ' *= *' 'tolower($0) ~ /^dns/ {print $2}' "$_conf")

    if test ! -z "$_nameservers"; then
        echo "updating: $_nspath/resolv.conf"
        true > "$_nspath/resolv.conf"
        IFS=", "; for i in $_nameservers; do
            echo "nameserver $i" >> "$_nspath/resolv.conf"
        done
    fi

    ip -n "$_ns" link set "$_dev" up
    ip -n "$_ns" route add default dev "$_dev"
    ip -6 -n "$_ns" route add default dev "$_dev"
}

wg.down () {
    _dev="$1"
    
    if test -z "$_dev"; then
        echo "not enough information: \"dev\" argument is required."
        exit 1
    fi
    
    ip -n "$_ns" link del "$_dev"
}

wg.reload () {
    wg.down "$1"
    wg.up "$1"
}

setup () {
    netns.add
    
    if test -d "$_nspath"; then
        netns.setup
        netns.nftables
        netns.wireguard
    else
        echo "warning: $_nspath does not exist"
    fi
}

remove () {
    netns.remove
}

enter () {
    # patch to disable nscd in netfs to prevent dns leaks
    ip netns exec "$_ns"  "$SHELL" --init-file <(echo "test -e /run/nscd/socket && mount --bind /var/empty /run/nscd")
}

exec () {
    ip netns exec "$_ns" "$@"
}


list () {
    ip netns list
    exit 0
}

help () {
    echo "Usage: eznetns [netns] [command]"
    echo "command: " $_commands
    echo "### netns uses files in /etc/netns/[netns] to setup network space ###"
    echo
    echo "examples:"
    echo "#setup network space vpn"
    echo "netns vpn setup"
    echo "# reload wireguard wg0"
    echo "netns vpn wg.reload wg0"
    echo "# remove network space vpn"
    echo "netns vpn remove"
    exit 0
}


# main
#_commands=$(compgen -A function)
_commands=$(declare -F | awk '{print $3}')

case "$1" in 
 -h) help ;; 
 --help) help ;;
help) help ;;
list) list ;;
esac

_ns="$1"
#_nspath="/etc/netns/$_ns"
_nspath="/root/.config/eznetns/$_ns"
shift

if test -z "$_ns"; then
    help
fi

_command="$1"
shift

[[ $_commands =~ (^|[[:space:]])$_command($|[[:space:]]) ]] || { echo "command not found: $_command"; exit 1; }

$_command "$@"
